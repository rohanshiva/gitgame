{"ast":null,"code":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\n\nvar Prism = function () {\n  // Private helper vars\n  var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n  var uniqueId = 0;\n\n  // The grammar object for plaintext\n  var plainTextGrammar = {};\n  var _ = {\n    /**\n     * A namespace for utility methods.\n     *\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n     * change or disappear at any time.\n     *\n     * @namespace\n     * @memberof Prism\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n      /**\n       * Returns the name of the type of the given value.\n       *\n       * @param {any} o\n       * @returns {string}\n       * @example\n       * type(null)      === 'Null'\n       * type(undefined) === 'Undefined'\n       * type(123)       === 'Number'\n       * type('foo')     === 'String'\n       * type(true)      === 'Boolean'\n       * type([1, 2])    === 'Array'\n       * type({})        === 'Object'\n       * type(String)    === 'Function'\n       * type(/abc+/)    === 'RegExp'\n       */\n      type: function type(o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n      /**\n       * Returns a unique number for the given object. Later calls will still return the same number.\n       *\n       * @param {Object} obj\n       * @returns {number}\n       */\n      objId: function objId(obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n        return obj['__id'];\n      },\n      /**\n       * Creates a deep clone of the given object.\n       *\n       * The main intended use of this function is to clone language definitions.\n       *\n       * @param {T} o\n       * @param {Record<number, any>} [visited]\n       * @returns {T}\n       * @template T\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = /** @type {Record<string, any>} */{};\n            visited[id] = clone;\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n            return (/** @type {any} */clone\n            );\n          case 'Array':\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = [];\n            visited[id] = clone;\n            /** @type {Array} */ /** @type {any} */o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return (/** @type {any} */clone\n            );\n          default:\n            return o;\n        }\n      },\n      /**\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n       *\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n       *\n       * @param {Element} element\n       * @returns {string}\n       */\n      getLanguage: function getLanguage(element) {\n        while (element) {\n          var m = lang.exec(element.className);\n          if (m) {\n            return m[1].toLowerCase();\n          }\n          element = element.parentElement;\n        }\n        return 'none';\n      },\n      /**\n       * Sets the Prism `language-xxxx` class of the given element.\n       *\n       * @param {Element} element\n       * @param {string} language\n       * @returns {void}\n       */\n      setLanguage: function setLanguage(element, language) {\n        // remove all `language-xxxx` classes\n        // (this might leave behind a leading space)\n        element.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n        // add the new `language-xxxx` class\n        // (using `classList` will automatically clean up spaces for us)\n        element.classList.add('language-' + language);\n      },\n      /**\n       * Returns whether a given class is active for `element`.\n       *\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n       * given class is just the given class with a `no-` prefix.\n       *\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\n       *\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n       * version of it, the class is considered active.\n       *\n       * @param {Element} element\n       * @param {string} className\n       * @param {boolean} [defaultActivation=false]\n       * @returns {boolean}\n       */\n      isActive: function isActive(element, className, defaultActivation) {\n        var no = 'no-' + className;\n        while (element) {\n          var classList = element.classList;\n          if (classList.contains(className)) {\n            return true;\n          }\n          if (classList.contains(no)) {\n            return false;\n          }\n          element = element.parentElement;\n        }\n        return !!defaultActivation;\n      }\n    },\n    /**\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n     *\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    languages: {\n      /**\n       * The grammar for plain, unformatted text.\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n      /**\n       * Creates a deep copy of the language with the given id and appends the given tokens.\n       *\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n       * will be overwritten at its original position.\n       *\n       * ## Best practices\n       *\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n       *\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n       *\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n       * @param {Grammar} redef The new tokens to append.\n       * @returns {Grammar} The new language created.\n       * @public\n       * @example\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n       *     // at its original position\n       *     'comment': { ... },\n       *     // CSS doesn't have a 'color' token, so this token will be appended\n       *     'color': /\\b(?:red|green|blue)\\b/\n       * });\n       */\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n        return lang;\n      },\n      /**\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\n       *\n       * ## Usage\n       *\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n       * this:\n       *\n       * ```js\n       * Prism.languages.markup.style = {\n       *     // token\n       * };\n       * ```\n       *\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n       * before existing tokens. For the CSS example above, you would use it like this:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'cdata', {\n       *     'style': {\n       *         // token\n       *     }\n       * });\n       * ```\n       *\n       * ## Special cases\n       *\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n       * will be ignored.\n       *\n       * This behavior can be used to insert tokens after `before`:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'comment', {\n       *     'comment': Prism.languages.markup.comment,\n       *     // tokens after 'comment'\n       * });\n       * ```\n       *\n       * ## Limitations\n       *\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n       * deleting properties which is necessary to insert at arbitrary positions.\n       *\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\n       *\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n       * you hold the target object in a variable, then the value of the variable will not change.\n       *\n       * ```js\n       * var oldMarkup = Prism.languages.markup;\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n       *\n       * assert(oldMarkup !== Prism.languages.markup);\n       * assert(newMarkup === Prism.languages.markup);\n       * ```\n       *\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n       * object to be modified.\n       * @param {string} before The key to insert before.\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n       * object to be modified.\n       *\n       * Defaults to `Prism.languages`.\n       * @returns {Grammar} The new grammar object.\n       * @public\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root || /** @type {any} */_.languages;\n        var grammar = root[inside];\n        /** @type {Grammar} */\n        var ret = {};\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            // Do not insert token which also occur in insert. See #1525\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n        var old = root[inside];\n        root[inside] = ret;\n\n        // Update references in other language definitions\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n            var propertyType = _.util.type(property);\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    /**\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n     * and the language definitions to use, and returns a string with the HTML produced.\n     *\n     * The following hooks will be run:\n     * 1. `before-tokenize`\n     * 2. `after-tokenize`\n     * 3. `wrap`: On each {@link Token}.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @param {string} language The name of the language definition passed to `grammar`.\n     * @returns {string} The highlighted HTML.\n     * @memberof Prism\n     * @public\n     * @example\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n     */\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      _.hooks.run('before-tokenize', env);\n      env.tokens = _.tokenize(env.code, env.grammar);\n      _.hooks.run('after-tokenize', env);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    /**\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n     * and the language definitions to use, and returns an array with the tokenized code.\n     *\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n     *\n     * This method could be useful in other contexts as well, as a very crude parser.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\n     * @memberof Prism\n     * @public\n     * @example\n     * let code = `var foo = 0;`;\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n     * tokens.forEach(token => {\n     *     if (token instanceof Prism.Token && token.type === 'number') {\n     *         console.log(`Found numeric literal: ${token.content}`);\n     *     }\n     * });\n     */\n    tokenize: function tokenize(text, grammar) {\n      var rest = grammar.rest;\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n        delete grammar.rest;\n      }\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n    /**\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    hooks: {\n      all: {},\n      /**\n       * Adds the given callback to the list of callbacks for the given hook.\n       *\n       * The callback will be invoked when the hook it is registered for is run.\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n       *\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\n       *\n       * @param {string} name The name of the hook.\n       * @param {HookCallback} callback The callback function which is given environment variables.\n       * @public\n       */\n      add: function add(name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n      /**\n       * Runs a hook invoking all registered callbacks with the given environment variables.\n       *\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\n       *\n       * @param {string} name The name of the hook.\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n       * @public\n       */\n      run: function run(name, env) {\n        var callbacks = _.hooks.all[name];\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  };\n\n  // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\n   * Creates a new token.\n   *\n   * @param {string} type See {@link Token#type type}\n   * @param {string | TokenStream} content See {@link Token#content content}\n   * @param {string|string[]} [alias] The alias(es) of the token.\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n   * @class\n   * @global\n   * @public\n   */\n  function Token(type, content, alias, matchedStr) {\n    /**\n     * The type of the token.\n     *\n     * This is usually the key of a pattern in a {@link Grammar}.\n     *\n     * @type {string}\n     * @see GrammarToken\n     * @public\n     */\n    this.type = type;\n    /**\n     * The strings or tokens contained by this token.\n     *\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\n     *\n     * @type {string | TokenStream}\n     * @public\n     */\n    this.content = content;\n    /**\n     * The alias(es) of the token.\n     *\n     * @type {string|string[]}\n     * @see GrammarToken\n     * @public\n     */\n    this.alias = alias;\n    // Copy of the full string this token was created from\n    this.length = (matchedStr || '').length | 0;\n  }\n\n  /**\n   * A token stream is an array of strings and {@link Token Token} objects.\n   *\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n   * them.\n   *\n   * 1. No adjacent strings.\n   * 2. No empty strings.\n   *\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\n   *\n   * @typedef {Array<string | Token>} TokenStream\n   * @global\n   * @public\n   */\n\n  /**\n   * Converts the given token or token stream to an HTML representation.\n   *\n   * The following hooks will be run:\n   * 1. `wrap`: On each {@link Token}.\n   *\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\n   * @param {string} language The name of current language.\n   * @returns {string} The HTML representation of the token or token stream.\n   * @memberof Token\n   * @static\n   */\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n    _.hooks.run('wrap', env);\n    var attributes = '';\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n\n  /**\n   * @param {RegExp} pattern\n   * @param {number} pos\n   * @param {string} text\n   * @param {boolean} lookbehind\n   * @returns {RegExpExecArray | null}\n   */\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n    return match;\n  }\n\n  /**\n   * @param {string} text\n   * @param {LinkedList<string | Token>} tokenList\n   * @param {any} grammar\n   * @param {LinkedListNode<string | Token>} startNode\n   * @param {number} startPos\n   * @param {RematchOptions} [rematch]\n   * @returns {void}\n   * @private\n   *\n   * @typedef RematchOptions\n   * @property {string} cause\n   * @property {number} reach\n   */\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n\n        /** @type {RegExp} */\n        var pattern = patternObj.pattern || patternObj;\n        for (\n        // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n          var str = currentNode.value;\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n          if (str instanceof Token) {\n            continue;\n          }\n          var removeCount = 1; // this is the to parameter of removeBetween\n          var match;\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n            if (!match || match.index >= text.length) {\n              break;\n            }\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos;\n\n            // find the node that contains the match\n            p += currentNode.value.length;\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            }\n            // adjust pos (and p)\n            p -= currentNode.value.length;\n            pos = p;\n\n            // the current node is a Token, then the match starts inside another Token, which is invalid\n            if (currentNode.value instanceof Token) {\n              continue;\n            }\n\n            // find the last node which is affected by this match\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n            removeCount--;\n\n            // replace with the new match\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n            if (!match) {\n              continue;\n            }\n          }\n\n          // eslint-disable-next-line no-redeclare\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n          var removeFrom = currentNode.prev;\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n            // the reach might have been extended because of the rematching\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @typedef LinkedListNode\n   * @property {T} value\n   * @property {LinkedListNode<T> | null} prev The previous node.\n   * @property {LinkedListNode<T> | null} next The next node.\n   * @template T\n   * @private\n   */\n\n  /**\n   * @template T\n   * @private\n   */\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n\n    /** @type {LinkedListNode<T>} */\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n    this.tail = tail;\n    this.length = 0;\n  }\n\n  /**\n   * Adds a new node with the given value to the list.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {T} value\n   * @returns {LinkedListNode<T>} The added node.\n   * @template T\n   */\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\n   * Removes `count` nodes after the given node. The given node will not be removed.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {number} count\n   * @template T\n   */\n  function removeRange(list, node, count) {\n    var next = node.next;\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\n   * @param {LinkedList<T>} list\n   * @returns {T[]}\n   * @template T\n   */\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n    return array;\n  }\n  return _;\n}();\nvar prism = Prism;\nPrism.default = Prism;\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function value(attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n  };\n\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [\n    // [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    },\n    // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    },\n    // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [\n    // a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [\n    // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    },\n    // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    },\n    // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    },\n    // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n    // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n    // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' +\n      // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' +\n      // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n      }\n    },\n\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + (\n    // constant\n    /NaN|Infinity/.source + '|' +\n    // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' +\n    // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' +\n    // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' +\n    // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' +\n    // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [\n    // Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n        },\n\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n    var codeLang = '';\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n    var grammar = Prism.languages[codeLang];\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n      if (code[0] === '#') {\n        var value;\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n        if (known) {\n          return known;\n        } // unable to decode\n\n        return m;\n      }\n    });\n    return text;\n  }\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n    aliases.push(alias);\n  }\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n        currentIndex = definitionEnd + 1;\n      }\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n  Prism.languages.javascript['template-string'] = [\n  // styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),\n  // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n  // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source),\n  // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source),\n  // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),\n  // sql`...`\n  createTemplate('sql', /\\bsql/.source),\n  // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n        var token = tokens[i];\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token : /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n            if (before) {\n              replacement.push(before);\n            }\n            replacement.push(middle);\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        if (typeof token === 'string') {\n          continue;\n        }\n        var content = token.content;\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n          continue;\n        }\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n    },\n\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n  // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n  // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n    if (typeof token === 'string') {\n      return token;\n    }\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n    return token.content.map(stringifyToken).join('');\n  };\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [\n    // Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n    // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m,\n    // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [\n  // binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i,\n  // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n  // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function value(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function value(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n            var token = tokens[i];\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n                replacement.push(middle);\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */) {\n              walkTokens(token.content);\n            }\n          }\n          return tokens;\n        }\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [\n  // Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  },\n  // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [\n  // binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i,\n  // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i,\n  // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n    }\n  },\n\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [\n    // We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\nexport default prism;","map":{"version":3,"names":["Prism","lang","uniqueId","plainTextGrammar","_","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlight","env","code","hooks","run","tokenize","stringify","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","name","push","callbacks","length","matchedStr","s","e","tag","classes","attributes","aliases","apply","join","matchPattern","pattern","pos","lookbehind","lastIndex","match","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","source","currentNode","next","tail","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","count","array","prism","default","markup","addInlined","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","entity","variable","toBeCopied","shell","clike","c","keyword","modName","cpp","string","css","addAttribute","selectorInside","selector","unit","number","javascript","regex","js","comment","interpolation","coffeescript","coffee","anchorOrAlias","properties","plainKey","createValuePattern","yaml","yml","inner","createInline","tableCell","tableRow","tableLine","markdown","punctuation","walkTokens","l","codeLang","codeBlock","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","tagPattern","KNOWN_ENTITY_NAMES","fromCodePoint","String","fromCharCode","parseInt","Number","known","md","graphql","afterTokenizeGraphql","validTokens","filter","currentIndex","getToken","offset","isTokenType","types","findClosingBracket","open","close","stackHeight","test","addAlias","startToken","inputVariables","definitionEnd","t","mutationEnd","varToken","indexOf","sql","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","undefined","Boolean","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","tokenizeInterpolationExpression","expression","tempGrammar","args","splice","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedCode","interpolationExpression","placeholder","embeddedTokens","placeholders","keys","substring","middle","replacement","afterTokens","concat","supportedLanguages","findTemplateStrings","embedded","stringContent","typescript","typeInside","ts","withId","unshift","maybeClassNameTokens","space","braces","spread","re","jsx","stringifyToken","openedTags","notTagNorBrace","pop","openedBraces","plainText","diff","PREFIXES","prefix","git","go","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","tokenizePlaceholders","handlebars","handlebarsPattern","hbs","json","webmanifest","less","makefile","objectivec","objc","ocaml","python","py","reason","function","sass","atrule","operator","important","scss","stylus","func","tsx","wasm"],"sources":["/home/runner/work/gitgame/gitgame/client/node_modules/prism-react-renderer/prism/index.js"],"sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\n\n var Prism = (function () {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\treturn _;\n\n}());\n\nvar prism = Prism;\nPrism.default = Prism;\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function (attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */\n\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */\n\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */\n\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n\nexport default prism;\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGqD,MAAM,EAAE,SAAAA,OAAU3B,EAAE,EAAE4B,KAAK,EAAE;QAC5B,IAAIxD,IAAI,GAAGG,CAAC,CAACC,IAAI,CAACqB,KAAK,CAACtB,CAAC,CAAC+C,SAAS,CAACtB,EAAE,CAAC,CAAC;QAExC,KAAK,IAAIC,GAAG,IAAI2B,KAAK,EAAE;UACtBxD,IAAI,CAAC6B,GAAG,CAAC,GAAG2B,KAAK,CAAC3B,GAAG,CAAC;QACvB;QAEA,OAAO7B,IAAI;MACZ,CAAC;MAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGyD,YAAY,EAAE,SAAAA,aAAUC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACrDA,IAAI,GAAGA,IAAI,IAAI,kBAAoB1D,CAAC,CAAC+C,SAAU;QAC/C,IAAIY,OAAO,GAAGD,IAAI,CAACH,MAAM,CAAC;QAC1B;QACA,IAAIK,GAAG,GAAG,CAAC,CAAC;QAEZ,KAAK,IAAIC,KAAK,IAAIF,OAAO,EAAE;UAC1B,IAAIA,OAAO,CAAChC,cAAc,CAACkC,KAAK,CAAC,EAAE;YAElC,IAAIA,KAAK,IAAIL,MAAM,EAAE;cACpB,KAAK,IAAIM,QAAQ,IAAIL,MAAM,EAAE;gBAC5B,IAAIA,MAAM,CAAC9B,cAAc,CAACmC,QAAQ,CAAC,EAAE;kBACpCF,GAAG,CAACE,QAAQ,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}